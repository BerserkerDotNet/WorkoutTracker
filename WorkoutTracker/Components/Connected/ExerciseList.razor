@inject IDialogService DialogService

<MudGrid>
	<MudItem xs="12" sm="2">
		<MudPaper Class="pa-  4 mt-4">

			<MudButton Class="my-4" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Success" OnClick="() => Props.Add.InvokeAsync()">Add exercise</MudButton>
			<MudTextField T="string" Label="Search" ValueChanged="OnSearch" />
			<MudSelect T="string" Label="Muscle Groups" MultiSelection="true" SelectedValuesChanged="OnSelectedChipsChanged">
				@foreach (var muscleGroup in MuscleGroups.Groups)
				{
					<MudSelectItem T="string" Value="@muscleGroup">@muscleGroup</MudSelectItem>
				}
			</MudSelect>
		</MudPaper>
	</MudItem>
	<MudItem xs="12" sm="10">
		<ItemsList Items="_filteredList" Context="item">
			<MudCard Class="mb-4" Outlined="false">
				<Image Path="@item.ImagePath" ImageName="@item.Name" />
				<MudCardContent>
					<MudText Align="Align.Center" Typo="Typo.h5">@item.Name</MudText>
					<MudText Typo="Typo.body2">@item.Description</MudText>

					<MudList Clickable="true">
						<MudListSubheader>
							Muscles:
						</MudListSubheader>
						@foreach (var muscleGroup in item.Muscles.GroupBy(m => m.MuscleGroup))
						{
							<MudListItem Text="@muscleGroup.Key">
								<NestedList>
									@foreach (var muscle in muscleGroup)
									{
										<MudListItem>
											@muscle.Name
										</MudListItem>
									}
								</NestedList>
							</MudListItem>

						}
					</MudList>

					@foreach (var tag in item.Tags)
					{
						<MudChip Icon="@Icons.Material.Filled.Tag" Color="Color.Info">@tag</MudChip>
					}
				</MudCardContent>
				<MudCardActions>
					<div class="d-flex align-center justify-space-between mt-6">
						<MudButton Class="ml-2" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Warning" OnClick="() => Props.Edit.InvokeAsync(item)">Edit</MudButton>
						<MudButton Class="ml-2" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => OnDelete(item)">Delete</MudButton>
					</div>
				</MudCardActions>
			</MudCard>
		</ItemsList>
	</MudItem>
</MudGrid>

@code {

	private ICollection<ExerciseViewModel> _filteredList = new List<ExerciseViewModel>();

	[Parameter]
	public ExerciseListProps Props { get; set; }

	protected override void OnParametersSet()
	{
		_filteredList = new List<ExerciseViewModel>(Props.List);
	}

	private void OnSelectedChipsChanged(IEnumerable<string> values)
	{
		if (!values.Any())
		{
			_filteredList = new List<ExerciseViewModel>(Props.List);
			return;
		}

		var selectedGroups = values.ToArray();
		_filteredList = Props.List
			.Where(e => e.Muscles.Any(m => selectedGroups.Contains(m.MuscleGroup)))
			.ToList();
	}

	private void OnSearch(string text)
	{
		_filteredList = Props.List
			.Where(e => e.Name.Contains(text, StringComparison.OrdinalIgnoreCase))
			.ToList();
	}

	private async Task OnDelete(ExerciseViewModel record)
	{
		var result = await DialogService.ShowMessageBox("Delete exercise", $"Are you sure you wnat to delete {record.Name}?", "Yes", "No");
		if (result.HasValue && result.Value)
		{
			await Props.Delete.InvokeAsync(record.Id);
		}
	}
}
