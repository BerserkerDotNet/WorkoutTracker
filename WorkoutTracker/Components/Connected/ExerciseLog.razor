<h2>Exercise history</h2>

<MudDatePicker Class="d-flex align-center" PickerVariant="PickerVariant.Static" Date="_date" MaxDate="DateTime.Today" DisableToolbar="true" DateChanged="OnDateChanged" />

@foreach (var logRecord in _records)
{
	var totalDuration = Math.Ceiling(logRecord.Sets.Sum(s => s.Duration.TotalMinutes));
	var totalRest = Math.Ceiling(logRecord.Sets.Sum(s => s.RestTime.TotalMinutes));

	<MudCard Class="my-4" Elevation="3">
		<Image Path="@logRecord.Exercise.ImagePath" ImageName="@logRecord.Exercise.Name" />
		<MudCardContent>
			<MudText Align="Align.Center" Typo="Typo.h5">@logRecord.Exercise.Name</MudText>
			<MudText Typo="Typo.body2">@logRecord.Exercise.Description</MudText>
			<MudText Typo="Typo.body2">Date: @logRecord.Date.ToShortDateString()</MudText>
			<MudText Typo="Typo.body2">Total of @logRecord.Sets.Count() set(s) with durtation of @totalDuration minutes and rest time is @totalRest minutes.</MudText>
		</MudCardContent> 
		<MudCardActions>
			<div class="d-flex align-center justify-space-between" style="width:100%">
				<MudButton StartIcon="@Icons.Material.Filled.List" Color="Color.Info" OnClick="() => OnViewDetails(logRecord)">View details</MudButton>
				<MudButton StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => OnDelete(logRecord)">Delete</MudButton>
			</div>
		</MudCardActions>
	</MudCard>
}

<MudOverlay Visible="_isLoading" DarkBackground="true">
	<MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>

@code
{
	private bool _isLoading = false;
	private DateTime _date;
	private IEnumerable<LogEntryViewModel> _records = Enumerable.Empty<LogEntryViewModel>();

	[Inject]
	public IDialogService DialogService { get; set; }

	[Inject]
	public NavigationManager Navigation { get; set; }

	[Parameter]
	public ExercisesLogProps Props { get; set; }

	protected override void OnParametersSet()
	{
		_date = Props.SelectedDate.ToDateTime();
		_records = Props.Log.ContainsKey(Props.SelectedDate) ? Props.Log[Props.SelectedDate] : Enumerable.Empty<LogEntryViewModel>();
		_isLoading = !Props.Log.ContainsKey(Props.SelectedDate);
	}

	private async Task OnDateChanged(DateTime? newDate)
	{
		_isLoading = true;
		if (newDate.HasValue)
		{
			Props.SelectedDate = newDate.Value.ToDateOnly(); // Hack to prevent re-rendering with old props
			await Props.Load.InvokeAsync(newDate.Value);
		}
		_isLoading = false;
	}

	private void OnViewDetails(LogEntryViewModel record)
	{
		var url = $"/logrecorddetails/{Props.SelectedDate.ToString("yyyy-MM-dd")}/{record.Id}";
		Navigation.NavigateTo(url);
	}

	private async Task OnDelete(LogEntryViewModel record)
	{
		var result = await DialogService.ShowMessageBox("Delete exercise", $"Are you sure you wnat to delete {record.Exercise.Name}?", "Yes", "No");
		if (result.HasValue && result.Value)
		{
			await Props.Delete.InvokeAsync(record.Id);
		}
	}
}

