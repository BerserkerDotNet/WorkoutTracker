    <MudPaper Elevation="25" Class="pa-2 mt-2 rounded-lg">
        <ItemSearch TItem="ExerciseViewModel" Items="Exercises" ItemNameFunc="@(e => e.Name)" @bind-Value="selectedExercise" />
        <div class="d-flex justify-space-around">
            <MudButton Class="btn-confirm" OnClick="OnSelectionConfirmed" Size="Size.Small" Color="Color.Primary" FullWidth="false" Disabled="@(selectedExercise is null)">@ActionText</MudButton>
            <MudButton Class="btn-cancel" OnClick="Cancel" Size="Size.Small" Color="Color.Secondary" FullWidth="false">Cancel</MudButton>
        </div>
    </MudPaper>

@code
{
    private ExerciseViewModel selectedExercise;

    [Parameter]
    [EditorRequired]
    public string ActionText { get; set; }

    [Parameter]
    [EditorRequired]
    public IEnumerable<ExerciseViewModel> Exercises { get; set; }

    [Parameter]
    public EventCallback<ExerciseViewModel> OnExerciseSelected { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    private async Task OnSelectionConfirmed()
    {
        await OnExerciseSelected.InvokeAsync(selectedExercise);
    }

    private async Task Cancel()
    {
        selectedExercise = null;

        await OnCancel.InvokeAsync();
    }
}