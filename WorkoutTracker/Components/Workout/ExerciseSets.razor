@{
    var idx = 0;
}

@foreach (var set in _workoutSets)
{
    var localIdx = idx;
    var isCompleted = set.Status == SetStatus.Completed;
    var isRunning = set.Status == SetStatus.InProgress;
    <MudPaper Class="d-flex align-center my-2">
        @if (isCompleted)
        {
            <MudIconButton Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Size="Size.Medium" Class="mx-2" OnClick="() => OnEditSet(set)" />
        }
        else if (isRunning)
        {
            <MudIconButton Icon="@Icons.Material.Filled.RunCircle" Color="Color.Info" Size="Size.Medium" Class="mx-2" OnClick="() => OnFinishSet(set)" />
        }
        else
        {
            <MudIconButton Icon="@Icons.Material.Filled.PlayCircleOutline" Color="Color.Primary" Size="Size.Medium" Class="mx-2" OnClick="() => OnStartSet(localIdx, set)" />
        }
        <MudTextField T="double" Variant="Variant.Text" DisableUnderLine="true" Label="Weight" ReadOnly="isCompleted" @bind-Value="@set.Weight" />
        <MudTextField T="int" Variant="Variant.Text" DisableUnderLine="true" Label="Reps" ReadOnly="isCompleted" @bind-Value="@set.Reps" />
    </MudPaper>
    idx++;
}

@code {

    private IEnumerable<WorkoutSet> _workoutSets = Enumerable.Empty<WorkoutSet>();
    private int _currentlyRunningSetIdx = -1;

    [Parameter]
    [EditorRequired]
    public IEnumerable<Set> CompletedSets { get; set; }

    [Parameter]
    [EditorRequired]
    public int TargetSets { get; set; }

    [Parameter]
    public int TargetWeight { get; set; }

    [Parameter]
    public int TargetReps { get; set; }

    [Parameter]
    public EventCallback<WorkoutSet> StartSet { get; set; }

    [Parameter]
    public EventCallback<WorkoutSet> FinishSet { get; set; }

    [Parameter]
    public EventCallback<WorkoutSet> EditSet { get; set; }

    protected override void OnParametersSet()
    {
        _workoutSets = GenerateSets();
    }

    private IEnumerable<WorkoutSet> GenerateSets()
    {
        var setsCount = Math.Max(TargetSets, CompletedSets.Count());
        var sets = new List<WorkoutSet>(setsCount);
        for (int i = 0; i < setsCount; i++)
        {
            var status = i == _currentlyRunningSetIdx ? SetStatus.InProgress : SetStatus.NotStarted;
            if (i >= CompletedSets.Count() && i < _workoutSets.Count())
            {
                var set = _workoutSets.ElementAt(i);
                var weight = set.Weight > 0 ? set.Weight : TargetWeight;
                var reps = set.Reps > 0 ? set.Reps : TargetReps;
                set = set with { Status = status, Weight = weight, Reps = reps };
                sets.Add(set);
            }
            else
            {
                var set = i < CompletedSets.Count() ? WorkoutSet.CreateFromSet(i, CompletedSets.ElementAt(i)) : WorkoutSet.CreateNewSet(i, status, TargetWeight, TargetReps);
                sets.Add(set);
            }
        }

        return sets;
    }

    private async Task OnStartSet(int idx, WorkoutSet set)
    {
        _currentlyRunningSetIdx = idx;
        await StartSet.InvokeAsync(set);
    }
    private async Task OnFinishSet(WorkoutSet set)
    {
        _currentlyRunningSetIdx = -1;
        await FinishSet.InvokeAsync(set);
    }

    private async Task OnEditSet(WorkoutSet set)
    {
        await EditSet.InvokeAsync(set);
    }
}
