@inject IDialogService DialogService

<MudDatePicker Class="d-flex align-center" PickerVariant="PickerVariant.Static" Date="Props.SelectedDate.ToDateTime()" MaxDate="DateTime.Today" DisableToolbar="true" DateChanged="OnDateChanged" />

@foreach (var logRecord in Props.Records)
{
	var totalDuration = Math.Ceiling(logRecord.Sets.Sum(s => s.Duration.TotalMinutes));
	var totalRest = Math.Ceiling(logRecord.Sets.Sum(s => s.RestTime.TotalMinutes));

	<MudCard Class="my-4" Elevation="3">
		<Image Path="@logRecord.Exercise.ImagePath" ImageName="@logRecord.Exercise.Name" />
		<MudCardContent>
			<MudText Align="Align.Center" Typo="Typo.h5">@logRecord.Exercise.Name</MudText>
			<MudText Typo="Typo.body2">@logRecord.Exercise.Description</MudText>
			<MudText Typo="Typo.body2">Date: @logRecord.Date.ToShortDateString()</MudText>
			<MudText Typo="Typo.body2">Total of @logRecord.Sets.Count() set(s) with durtation of @totalDuration minutes and rest time is @totalRest minutes.</MudText>
		</MudCardContent> 
		<MudCardActions>
			<div class="d-flex align-center justify-space-between" style="width:100%">
				<MudButton StartIcon="@Icons.Material.Filled.List" Color="Color.Info" OnClick="() => Props.ViewDetails(logRecord)">View details</MudButton>
				<MudButton StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => OnDelete(logRecord)">Delete</MudButton>
			</div>
		</MudCardActions>
	</MudCard>
}

<MudOverlay Visible="Props.IsLoadingRecods" DarkBackground="true">
	<MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>

@code {

	[Parameter]
	public ExercisesHistoryProps Props { get; set; }

	private async Task OnDateChanged(DateTime? newDate)
	{
		await Props.SelectedDateChanged(newDate.Value.ToDateOnly());
	}

	private async Task OnDelete(LogEntryViewModel record)
	{
		var result = await DialogService.ShowMessageBox("Delete exercise", $"Are you sure you wnat to delete {record.Exercise.Name}?", "Yes", "No");
		if (result.HasValue && result.Value)
		{
			await Props.Delete(record.Id);
		}
	}
}
