@inject IDialogService DialogService

<MudDatePicker 
	Class="d-flex align-center" 
	PickerVariant="PickerVariant.Static" 
	Date="Props.SelectedDate.ToDateTime()"
	MaxDate="DateTime.MaxValue"
	DisableToolbar="true" 
	DateChanged="OnDateChanged" />
<MudDivider Class="my-2" />
<If Condition="!Props.Records.Any()">
	<Then>
		<MudAlert Severity="Severity.Normal">Looks like you didn't train on @Props.SelectedDate.ToShortDateString().</MudAlert>
	</Then>
	<Else>
		@{
			var workoutDuration = Props.Records.Sum(r => r.TotalDuration);
			var workoutRest = Props.Records.Sum(r => r.TotalRest);
			var workoutWeight = Props.Records.Sum(r => r.TotalWeight);
		}
		<MudAlert Severity="Severity.Success">You workout lasted for <b>@(workoutDuration + workoutRest)</b> minutes. Time in exercise is <b>@workoutDuration</b> minutes, rested <b>@workoutRest</b> minutes. You lifted a total of <b>@workoutWeight</b> KGs</MudAlert>
	</Else>
</If>

@foreach (var logRecord in Props.Records)
{
	<MudCard Class="my-4" Elevation="3">
		<Image Path="@logRecord.Exercise.ImagePath" ImageName="@logRecord.Exercise.Name" />
		<MudCardContent>
			<MudText Align="Align.Center" Typo="Typo.h5">@logRecord.Exercise.Name</MudText>
			<MudText Typo="Typo.body2">@logRecord.Exercise.Description</MudText>
			<MudText Typo="Typo.body2">Date: @logRecord.Date.ToShortDateString()</MudText>
			<MudText Typo="Typo.body2">Total of @logRecord.Sets.Count() set(s) in @logRecord.TotalDuration minutes and rested @logRecord.TotalRest minutes.</MudText>
			<MudText Typo="Typo.body2">Weight lifted: @logRecord.TotalWeight KG.</MudText>
		</MudCardContent> 
		<MudCardActions>
			<div class="d-flex align-center justify-space-between" style="width:100%">
				<MudButton StartIcon="@Icons.Material.Filled.List" Color="Color.Info" OnClick="() => Props.ViewDetails(logRecord)">Set details</MudButton>
				<MudButton StartIcon="@Icons.Material.Filled.MultilineChart" Color="Color.Info" OnClick="() => Props.ViewDetails(logRecord)">Historic data</MudButton>
				<MudButton StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => OnDelete(logRecord)">Delete</MudButton>
			</div>
		</MudCardActions>
	</MudCard>
}

<MudOverlay Visible="Props.IsLoadingRecods" DarkBackground="true">
	<MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>

@code {

	[Parameter]
	public ExercisesHistoryProps Props { get; set; }

	private async Task OnDateChanged(DateTime? newDate)
	{
		await Props.SelectedDateChanged(newDate.Value.ToDateOnly());
	}

	private async Task OnDelete(LogEntryViewModel record)
	{
		var result = await DialogService.ShowMessageBox("Delete exercise", $"Are you sure you want to delete {record.Exercise.Name}?", "Yes", "No");
		if (result.HasValue && result.Value)
		{
			await Props.Delete(record.Id);
		}
	}
}
