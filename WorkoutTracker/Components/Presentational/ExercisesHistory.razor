@inject IDialogService DialogService
<MudDatePicker Class="d-flex align-center"
               PickerVariant="PickerVariant.Dialog"
               Variant="Variant.Outlined"
               Date="Props.SelectedDate.ToDateTime()"
               MaxDate="DateTime.MaxValue"
               DisableToolbar="true"
               Label="Workout date"
               Elevation="3"
               DateChanged="OnDateChanged" />
<MudDivider Class="my-2" />
<If Condition="!Props.Records.Any()">
    <Then>
        <MudAlert Severity="Severity.Normal">There is nothing on @Props.SelectedDate.ToShortDateString().</MudAlert>
    </Then>
    <Else>
        @{
            var workoutDuration = Props.Records.Sum(r => r.TotalDuration);
            var workoutRest = Props.Records.Sum(r => r.TotalRest);
            var workoutWeight = Props.Records.Sum(r => Props.ShowWeightInKG ? r.TotalWeightKG : r.TotalWeightLB);
            var secondaryWorkoutWeight = Props.Records.Sum(r => Props.ShowWeightInKG ? r.TotalWeightLB : r.TotalWeightKG);
            var weightUnit = Props.ShowWeightInKG ? "KG" : "LB";
            var secondaryWeightUnit = Props.ShowWeightInKG ? "LB" : "KG";
        }
        <MudAlert Severity="Severity.Success" Elevation="3" Variant="Variant.Outlined">
            You workout lasted for <b>@(workoutDuration + workoutRest)</b> minutes. Time in exercise is <b>@workoutDuration</b> minutes, rested <b>@workoutRest</b> minutes.
            You lifted a total of <b>@string.Format("{0:n0}",workoutWeight)</b> @weightUnit (@string.Format("{0:n0}",secondaryWorkoutWeight) @secondaryWeightUnit)
        </MudAlert>
    </Else>
</If>

@foreach (var logRecord in Props.Records)
{
    var weightLifted = Props.ShowWeightInKG ? logRecord.TotalWeightKG : logRecord.TotalWeightLB;
    var secondaryWeightLifted = Props.ShowWeightInKG ? logRecord.TotalWeightLB : logRecord.TotalWeightKG;
    var weightUnit = Props.ShowWeightInKG ? "KG" : "LB";
    var secondaryWeightUnit = Props.ShowWeightInKG ? "LB" : "KG";
    <MudCard Class="my-4" Elevation="3">
        <Image Path="@logRecord.Exercise.ImagePath" ImageName="@logRecord.Exercise.Name" />
        <MudCardContent>
            <MudText Align="Align.Center" Typo="Typo.h5">@logRecord.Exercise.Name</MudText>
            <MudText Typo="Typo.body2">@logRecord.Exercise.Description</MudText>
            <MudText Typo="Typo.body2">Total of @logRecord.Sets.Count() set(s) in @logRecord.TotalDuration minutes and rested @logRecord.TotalRest minutes.</MudText>
            <MudText Typo="Typo.body2">Weight lifted: @string.Format("{0:n0}", weightLifted) @weightUnit (@string.Format("{0:n0}", secondaryWeightLifted) @secondaryWeightUnit).</MudText>
        </MudCardContent>
        <MudCardActions>
            <div class="d-flex align-center justify-space-between" style="width:100%">
                <MudButton StartIcon="@Icons.Material.Filled.List" Color="Color.Info" OnClick="() => Props.ViewDetails(logRecord)">Set details</MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.MultilineChart" Color="Color.Info" OnClick="() => Props.ViewDetails(logRecord)">Historic data</MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => OnDelete(logRecord)">Delete</MudButton>
            </div>
        </MudCardActions>
    </MudCard>
}

@code {

    [Parameter]
    public ExercisesHistoryProps Props { get; set; }

    private async Task OnDateChanged(DateTime? newDate)
    {
        await Props.SelectedDateChanged(newDate.Value.ToDateOnly());
    }

    private async Task OnDelete(LogEntryViewModel record)
    {
        var result = await DialogService.ShowMessageBox("Delete exercise", $"Are you sure you want to delete {record.Exercise.Name}?", "Yes", "No");
        if (result.HasValue && result.Value)
        {
            await Props.Delete(record.Id);
        }
    }
}
