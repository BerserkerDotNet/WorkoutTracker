<h2>Today's schedule</h2>

@if (!Props.Schedule.Any())
{
	<div>Loading...</div>
}

<RadzenButton Click="Props.Rebuild" Text="Reshuffle schedule" Icon="published_with_changes" ButtonStyle="ButtonStyle.Secondary" Style="margin-bottom: 10px; width: 100%" />
@foreach (var item in Props.Schedule)
{
	<RadzenCard @onclick="() => Props.Start.InvokeAsync(item.Id)" @onswiped-right="() => OnSwiped(item)" @onswiped-left="() => OnSwiped(item)" data-swipe-threshold="100" Style="margin-bottom:10px">
		<div class="row">
			<div class="col-md-12">
				<div style="width: calc(100% - 5px);">
					<img src="data:image/png;base64, @(Convert.ToBase64String(item.Icon))" alt="@item.Name" style="width: calc(50% - 5px);margin-left:auto;margin-right:auto;display: block">
				</div>
			</div>
			<div class="col-md-12">
				<h3 class="text-center">
					@item.Name &nbsp;
					@if (Props.ExerciseCount is object && Props.ExerciseCount.ContainsKey(item.Id))
					{
						<RadzenBadge BadgeStyle="BadgeStyle.Info" Text="@(Props.ExerciseCount[item.Id].ToString())" />
					}
				</h3>
			</div>
		</div>
	</RadzenCard>

}

@code {
	[Parameter]
	public ExerciseScheduleProps Props { get; set; }

	public async Task OnSwiped(Exercise item)
	{
		await Props.Replace.InvokeAsync(item);
	}
}
