@page "/editexerciselog/{id:guid}/{exerciseid:guid}"
@inject AppState State
@inject NavigationManager Navigation

<h3>Log exercise</h3>

<form>
    <div class="form-group">
        <label>Exercise:</label>
        @if (_selectedExercise == null)
        {
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        }
        else
        {
            <div class="row">
                <div class="col-3">
                    <img src="data:image/png;base64, @(Convert.ToBase64String(_selectedExercise.Icon))" width="100" height="100" alt="@_selectedExercise.Name" style="text-align: center" />
                </div>
                <div class="col-9">
                    <h5>@_selectedExercise.Name</h5>
                    <span>@_selectedExercise.Muscles</span>
                </div>
            </div>
        }

    </div>
    <div class="form-group">
        <label>Repetetions:</label>
        <input type="number" class="form-control" @bind="Repetetions" />
    </div>
    <div class="form-group">
        <label>Weight:</label>
        <div class="input-group">
            <input type="number" class="form-control" @bind="Weight">
            <div class="input-group-append">
                <button class="btn btn-outline-secondary" type="button" @onclick="ChangeWeightUnits">@_weightUnits</button>
            </div>
        </div>
    </div>
    <div class="form-group">
        <label>Duration:</label>
        <div class="input-group">
            <input type="number" class="form-control" @bind="Duration">
            <div class="input-group-append">
                <button class="btn btn-outline-secondary" type="button" @onclick="@ToggleExerciseStopwatch">@(_stopWatch.IsRunning ? "Stop" : "Start")</button>
            </div>
        </div>
    </div>
    <div class="form-group">
        <label>Notes:</label>
        <textarea rows="4" class="form-control" @bind="Note" />
    </div>
    <div class="form-group">
        <label>Rate:</label>
        <Rating MaxStars="5" @bind-Value="Score" />
    </div>
    <button type="button" class="btn btn-lg btn-success" @onclick="Save">Save</button>
    <button type="button" class="btn btn-lg btn-danger" @onclick="Cancel">Cancel</button>
</form>

@code {

    private Exercise _selectedExercise = null;
    private string _weightUnits = "KG";
    private System.Diagnostics.Stopwatch _stopWatch = new System.Diagnostics.Stopwatch();

    [Parameter]
    public Guid Id { get; set; }

    [Parameter]
    public Guid ExerciseId { get; set; }

    public int Repetetions { get; set; }

    public float Weight { get; set; }

    public int Duration { get; set; }

    public int Score { get; set; }

    public string Note { get; set; }

    protected override void OnParametersSet()
    {
        _selectedExercise = State.Exercises[ExerciseId];
    }

    private void ChangeWeightUnits()
    {
        _weightUnits = _weightUnits == "KG" ? "LB" : "KG";
    }

    private void ToggleExerciseStopwatch()
    {
        if (!_stopWatch.IsRunning)
        {
            _stopWatch.Restart();
        }
        else
        {
            _stopWatch.Stop();
            Duration = (int)_stopWatch.Elapsed.TotalSeconds;
        }
    }

    private async Task Save()
    {
        await State.LogExercise(new ExerciseLogEntry
        {
            Id = Guid.NewGuid(),
            Date = DateTime.UtcNow,
            ExerciseId = ExerciseId,
            Duration = TimeSpan.FromSeconds(Duration),
            Repetitions = Repetetions,
            Weight = _weightUnits == "LB" ? Weight * 0.453592 : Weight,
            Score = Score,
            Note = Note
        });

        Navigation.NavigateTo("/");
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/");
    }

    private void SelectExercise(Exercise exercise)
    {
        _selectedExercise = exercise;
    }
}
