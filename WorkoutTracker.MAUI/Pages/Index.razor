@page "/"
@inject AppState State
@inject NavigationManager NavigationManager

<h3>Current exercise schedule</h3>
<button class="btn btn-primary" @onclick="BuildNew">New schedule</button>
<br />

@if (_isLoading)
{
    <div class="spinner-border text-primary" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}
else
{
    @foreach (var item in State.Schedule)
    {
        <div class="card">
            <div class="row no-gutters">
                <div class="col-4 text-center">
                    <span style="display:inline-block; height:100%; vertical-align: middle;"></span>
                    <img src="data:image/png;base64, @(Convert.ToBase64String(item.Icon))" alt="@item.Name" style="width: calc(100% - 5px);">
                </div>
                <div class="col-8">
                    <div class="card-body">
                        <h5 class="card-title">@item.Name</h5>
                        <p class="card-text">@item.Muscles</p>
                        <button @onclick:preventDefault @onclick="() => StartExercise(item)" class="btn btn-success">Start</button>
                        <button @onclick:preventDefault @onclick="() => ReplaceExercise(item)" class="btn btn-warning">Replace</button>
                        <button @onclick:preventDefault @onclick="() => OpenLog()" class="btn btn-warning">Open Log</button>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    private bool _isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        if (!State.Schedule.Any())
        {
            await BuildNew();
        }
    }

    private async Task BuildNew()
    {
        _isLoading = true;
        await State.BuildNewSchedule();
        _isLoading = false;
    }

    private void ReplaceExercise(Exercise exercise)
    {
         State.ReplaceExercise(exercise);
    }

    private void StartExercise(Exercise exercise)
    {
        NavigationManager.NavigateTo($"/editexerciselog/{Guid.Empty}/{exercise.Id}");
    }

    private void OpenLog()
    {
        NavigationManager.NavigateTo($"/log");
    }
}
